/*
 * generated by Xtext 2.25.0
 */
package event.driven.scoping;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;

import event.driven.sceneDl.Attribute;
import event.driven.sceneDl.Element;
import event.driven.sceneDl.Scene;
import event.driven.sceneDl.SceneDlPackage;


/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
public class SceneDlScopeProvider extends AbstractSceneDlScopeProvider {
	public IScope getScope(EObject context, EReference reference) {
		// Setting scope for the isA reference in Element
		if (context instanceof Element && reference == SceneDlPackage.Literals.ELEMENT__IS_A) {
			Scene erDiagram = (Scene) context.eContainer();
			Collection<Element> referrableEntities = new ArrayList<Element>(erDiagram.getElements());
			referrableEntities.remove(context); // Removing itself
			return Scopes.scopeFor(referrableEntities);
		}
		// Setting scope for the key reference in Element
		if (context instanceof Element && reference == SceneDlPackage.Literals.ELEMENT__KEY) {
			Element Element = (Element) context;
			Collection<Attribute> referrableAttributes = new ArrayList<Attribute>(Element.getAttributes());
			referrableAttributes.removeIf(it -> it.isIsTransient()); // Removing transient attributes
			return Scopes.scopeFor(referrableAttributes);
		}
		
		return super.getScope(context, reference);
	}
}
