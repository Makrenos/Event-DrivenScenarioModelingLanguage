/*
 * generated by Xtext 2.25.0
 */
package event.driven.serializer;

import com.google.inject.Inject;
import event.driven.sceneDl.Contain;
import event.driven.sceneDl.DynamicEntity;
import event.driven.sceneDl.Feature;
import event.driven.sceneDl.PositionAttribute;
import event.driven.sceneDl.RegularAttribute;
import event.driven.sceneDl.Scene;
import event.driven.sceneDl.SceneDlPackage;
import event.driven.sceneDl.StaticEntity;
import event.driven.services.SceneDlGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class SceneDlSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SceneDlGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SceneDlPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SceneDlPackage.CONTAIN:
				sequence_Contain(context, (Contain) semanticObject); 
				return; 
			case SceneDlPackage.DYNAMIC_ENTITY:
				sequence_DynamicEntity(context, (DynamicEntity) semanticObject); 
				return; 
			case SceneDlPackage.FEATURE:
				sequence_Feature(context, (Feature) semanticObject); 
				return; 
			case SceneDlPackage.POSITION_ATTRIBUTE:
				sequence_PositionAttribute(context, (PositionAttribute) semanticObject); 
				return; 
			case SceneDlPackage.REGULAR_ATTRIBUTE:
				sequence_RegularAttribute(context, (RegularAttribute) semanticObject); 
				return; 
			case SceneDlPackage.SCENE:
				sequence_Scene(context, (Scene) semanticObject); 
				return; 
			case SceneDlPackage.STATIC_ENTITY:
				sequence_StaticEntity(context, (StaticEntity) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Contain returns Contain
	 *
	 * Constraint:
	 *     (many?='many'? name=ID type=[DynamicEntity|ID])
	 */
	protected void sequence_Contain(ISerializationContext context, Contain semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Element returns DynamicEntity
	 *     DynamicEntity returns DynamicEntity
	 *
	 * Constraint:
	 *     (
	 *         type='dynamic_entity' 
	 *         name=ID 
	 *         key=[Attribute|ID]? 
	 *         isA+=[Element|ID]* 
	 *         ((attributes+=Attribute | contains+=Contain) contains+=Contain? (attributes+=Attribute? contains+=Contain?)*)?
	 *     )
	 */
	protected void sequence_DynamicEntity(ISerializationContext context, DynamicEntity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Feature returns Feature
	 *
	 * Constraint:
	 *     (many?='many'? name=ID type=[Element|ID])
	 */
	protected void sequence_Feature(ISerializationContext context, Feature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Attribute returns PositionAttribute
	 *     PositionAttribute returns PositionAttribute
	 *
	 * Constraint:
	 *     (name=ID type=AttributeType x=INT y=INT isTransient?='transient'?)
	 */
	protected void sequence_PositionAttribute(ISerializationContext context, PositionAttribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Attribute returns RegularAttribute
	 *     RegularAttribute returns RegularAttribute
	 *
	 * Constraint:
	 *     (name=ID type=AttributeType value+=AttributeValue value+=AttributeValue? isTransient?='transient'?)
	 */
	protected void sequence_RegularAttribute(ISerializationContext context, RegularAttribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Scene returns Scene
	 *
	 * Constraint:
	 *     (name=ID elements+=Element*)
	 */
	protected void sequence_Scene(ISerializationContext context, Scene semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Element returns StaticEntity
	 *     StaticEntity returns StaticEntity
	 *
	 * Constraint:
	 *     (
	 *         type='static_entity' 
	 *         name=ID 
	 *         key=[Attribute|ID]? 
	 *         isA+=[Element|ID]* 
	 *         ((attributes+=Attribute | features+=Feature) features+=Feature? (attributes+=Attribute? features+=Feature?)*)?
	 *     )
	 */
	protected void sequence_StaticEntity(ISerializationContext context, StaticEntity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
