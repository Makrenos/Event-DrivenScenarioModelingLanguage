/*
 * generated by Xtext 2.25.0
 */
package event.driven.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import event.driven.ide.contentassist.antlr.internal.InternalSceneDlParser;
import event.driven.services.SceneDlGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class SceneDlParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(SceneDlGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, SceneDlGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getElementAccess().getAlternatives(), "rule__Element__Alternatives");
			builder.put(grammarAccess.getStaticEntityAccess().getAlternatives_4_1(), "rule__StaticEntity__Alternatives_4_1");
			builder.put(grammarAccess.getStaticEntityAccess().getAlternatives_4_2(), "rule__StaticEntity__Alternatives_4_2");
			builder.put(grammarAccess.getAttributeAccess().getAlternatives(), "rule__Attribute__Alternatives");
			builder.put(grammarAccess.getAttributeValueAccess().getAlternatives(), "rule__AttributeValue__Alternatives");
			builder.put(grammarAccess.getAttributeTypeAccess().getAlternatives(), "rule__AttributeType__Alternatives");
			builder.put(grammarAccess.getSceneAccess().getGroup(), "rule__Scene__Group__0");
			builder.put(grammarAccess.getStaticEntityAccess().getGroup(), "rule__StaticEntity__Group__0");
			builder.put(grammarAccess.getStaticEntityAccess().getGroup_2(), "rule__StaticEntity__Group_2__0");
			builder.put(grammarAccess.getStaticEntityAccess().getGroup_3(), "rule__StaticEntity__Group_3__0");
			builder.put(grammarAccess.getStaticEntityAccess().getGroup_4(), "rule__StaticEntity__Group_4__0");
			builder.put(grammarAccess.getStaticEntityAccess().getGroup_4_2_0(), "rule__StaticEntity__Group_4_2_0__0");
			builder.put(grammarAccess.getStaticEntityAccess().getGroup_4_2_1(), "rule__StaticEntity__Group_4_2_1__0");
			builder.put(grammarAccess.getDynamicEntityAccess().getGroup(), "rule__DynamicEntity__Group__0");
			builder.put(grammarAccess.getDynamicEntityAccess().getGroup_2(), "rule__DynamicEntity__Group_2__0");
			builder.put(grammarAccess.getDynamicEntityAccess().getGroup_3(), "rule__DynamicEntity__Group_3__0");
			builder.put(grammarAccess.getDynamicEntityAccess().getGroup_4(), "rule__DynamicEntity__Group_4__0");
			builder.put(grammarAccess.getDynamicEntityAccess().getGroup_4_2(), "rule__DynamicEntity__Group_4_2__0");
			builder.put(grammarAccess.getRegularAttributeAccess().getGroup(), "rule__RegularAttribute__Group__0");
			builder.put(grammarAccess.getRegularAttributeAccess().getGroup_5(), "rule__RegularAttribute__Group_5__0");
			builder.put(grammarAccess.getPositionAttributeAccess().getGroup(), "rule__PositionAttribute__Group__0");
			builder.put(grammarAccess.getAttributeValueAccess().getGroup_2(), "rule__AttributeValue__Group_2__0");
			builder.put(grammarAccess.getSceneAccess().getNameAssignment_0(), "rule__Scene__NameAssignment_0");
			builder.put(grammarAccess.getSceneAccess().getElementsAssignment_1(), "rule__Scene__ElementsAssignment_1");
			builder.put(grammarAccess.getStaticEntityAccess().getTypeAssignment_0(), "rule__StaticEntity__TypeAssignment_0");
			builder.put(grammarAccess.getStaticEntityAccess().getNameAssignment_1(), "rule__StaticEntity__NameAssignment_1");
			builder.put(grammarAccess.getStaticEntityAccess().getKeyAssignment_2_1(), "rule__StaticEntity__KeyAssignment_2_1");
			builder.put(grammarAccess.getStaticEntityAccess().getIsAAssignment_3_1(), "rule__StaticEntity__IsAAssignment_3_1");
			builder.put(grammarAccess.getStaticEntityAccess().getAttributesAssignment_4_1_0(), "rule__StaticEntity__AttributesAssignment_4_1_0");
			builder.put(grammarAccess.getStaticEntityAccess().getFeaturesAssignment_4_1_1(), "rule__StaticEntity__FeaturesAssignment_4_1_1");
			builder.put(grammarAccess.getStaticEntityAccess().getAttributesAssignment_4_2_0_1(), "rule__StaticEntity__AttributesAssignment_4_2_0_1");
			builder.put(grammarAccess.getStaticEntityAccess().getFeaturesAssignment_4_2_1_1(), "rule__StaticEntity__FeaturesAssignment_4_2_1_1");
			builder.put(grammarAccess.getDynamicEntityAccess().getTypeAssignment_0(), "rule__DynamicEntity__TypeAssignment_0");
			builder.put(grammarAccess.getDynamicEntityAccess().getNameAssignment_1(), "rule__DynamicEntity__NameAssignment_1");
			builder.put(grammarAccess.getDynamicEntityAccess().getKeyAssignment_2_1(), "rule__DynamicEntity__KeyAssignment_2_1");
			builder.put(grammarAccess.getDynamicEntityAccess().getIsAAssignment_3_1(), "rule__DynamicEntity__IsAAssignment_3_1");
			builder.put(grammarAccess.getDynamicEntityAccess().getAttributesAssignment_4_1(), "rule__DynamicEntity__AttributesAssignment_4_1");
			builder.put(grammarAccess.getDynamicEntityAccess().getAttributesAssignment_4_2_1(), "rule__DynamicEntity__AttributesAssignment_4_2_1");
			builder.put(grammarAccess.getRegularAttributeAccess().getNameAssignment_0(), "rule__RegularAttribute__NameAssignment_0");
			builder.put(grammarAccess.getRegularAttributeAccess().getTypeAssignment_2(), "rule__RegularAttribute__TypeAssignment_2");
			builder.put(grammarAccess.getRegularAttributeAccess().getValueAssignment_4(), "rule__RegularAttribute__ValueAssignment_4");
			builder.put(grammarAccess.getRegularAttributeAccess().getValueAssignment_5_1(), "rule__RegularAttribute__ValueAssignment_5_1");
			builder.put(grammarAccess.getRegularAttributeAccess().getIsTransientAssignment_7(), "rule__RegularAttribute__IsTransientAssignment_7");
			builder.put(grammarAccess.getPositionAttributeAccess().getNameAssignment_0(), "rule__PositionAttribute__NameAssignment_0");
			builder.put(grammarAccess.getPositionAttributeAccess().getTypeAssignment_2(), "rule__PositionAttribute__TypeAssignment_2");
			builder.put(grammarAccess.getPositionAttributeAccess().getXAssignment_4(), "rule__PositionAttribute__XAssignment_4");
			builder.put(grammarAccess.getPositionAttributeAccess().getYAssignment_6(), "rule__PositionAttribute__YAssignment_6");
			builder.put(grammarAccess.getPositionAttributeAccess().getIsTransientAssignment_8(), "rule__PositionAttribute__IsTransientAssignment_8");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private SceneDlGrammarAccess grammarAccess;

	@Override
	protected InternalSceneDlParser createParser() {
		InternalSceneDlParser result = new InternalSceneDlParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public SceneDlGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SceneDlGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
