package event.driven.scenario.dse.queries

import "ca.mcgill.ecse.scenario"
import "http://www.eventDrivenScenario.org/behavior"

//Constraints

/*
pattern inScene(entity: DynamicEntity,scene : Scene){
	Scene.elements(scene,entity);
	
	Scene.boundry(scene,boundryPos);
	PositionAttribute.x(boundryPos,boundryPosX);
	PositionAttribute.y(boundryPos,boundryPosY);
	
	DynamicEntity.speed(entity,entitySpeed);
	PositionAttribute.x(entitySpeed,speedX);
	PositionAttribute.y(entitySpeed,speedY);
	
	DynamicEntity.position(entity,entityPos);
	PositionAttribute.x(entityPos,posX);
	PositionAttribute.y(entityPos,posY);
	
	check(posX <= boundryPosX && posY <= boundryPosY && posX >= 0 && posY >= 0);
}
*/

//Rules




pattern laneChangeBehavior(s: Scenario,dc: DynamicComponent,sc: LaneSegment,adc : AbstractDynamicInstance){
	Scenario.dynamicComponents(s,dc);
	Scenario.firstScene(s,fs);
	Scene.abstractDynamicInstances(fs,adc);
	AbstractDynamicInstance.actor(adc,dc);
	AbstractDynamicInstance.relations(adc,isPlacedOn);
	IsPlacedOn.source(isPlacedOn,adc);
	IsPlacedOn.target(isPlacedOn,sc);
}



pattern notEnoughBehavior(l: BehaviorList){
	BehaviorList.numberOfBehaviors(l,num);
	check(num < 2);
}


//All actors have at least 2 behavior
/*
pattern hasTwoBehavior(s: Scenario,l: ListsOfBehaviors){
	Scenario.dynamicComponents(s,dcs);
	ListsOfBehaviors.behaviorLists(l,bl);
	BehaviorList.actor(bl,ac);
	ac==dcs;
	neg find notEnoughBehavior(bl);
}
*/
