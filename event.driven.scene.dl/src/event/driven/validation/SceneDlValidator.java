/*
 * generated by Xtext 2.25.0
 */
package event.driven.validation;

import java.util.HashSet;
import java.util.Set;

import org.eclipse.xtext.validation.Check;

import event.driven.sceneDl.Attribute;
import event.driven.sceneDl.Element;
import event.driven.sceneDl.PositionAttribute;
import event.driven.sceneDl.SceneDlPackage;


/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class SceneDlValidator extends AbstractSceneDlValidator {

	@Check
	public void checkCyclicInheritance(Element Element) {
		checkCyclicInheritance2(Element, new HashSet<Element>());
	}

	private void checkCyclicInheritance2(Element Element, Set<Element> entitiesAlreadyChecked) {
		entitiesAlreadyChecked.add(Element);
		for (Element parent : Element.getIsA()) {
			if (entitiesAlreadyChecked.contains(parent)) {
				error("Cyclic inheritance is not allowed.",	SceneDlPackage.Literals.ELEMENT__IS_A);
				return;
			}
			checkCyclicInheritance2(parent, entitiesAlreadyChecked);
		}
	}
	
	@Check
	public void hasPosition(Element Element) {
		boolean flag = true;
			flag = checkAttributeInheritance(Element, new HashSet<Element>(),flag, "position");
			for(Attribute attrib : Element.getAttributes()) {
				if(attrib.getName().contains("position")) {
					flag = false;
				}
			}
			if(flag) {
				error("Elements must have position attribute",	SceneDlPackage.Literals.POSITION_ATTRIBUTE__X , SceneDlPackage.Literals.POSITION_ATTRIBUTE__Y);
			}
		
	}
	
	@Check
	public void hasSpeed(Element Element) {
		boolean flag = true;
		if(Element.getType().equals("dynamic")) {
			flag = checkAttributeInheritance(Element, new HashSet<Element>(),flag, "speed");
			for(Attribute attrib : Element.getAttributes()) {
				if(attrib.getName().equals("speed")) {
					flag = false;
				}
			}
			if(flag) {
				error("Dynamic objects must have speed attribute",	SceneDlPackage.Literals.ATTRIBUTE__NAME);
			}
		}
	}
	
	@Check
	public void doesntHaveSpeed(Element Element) {
		boolean flag = false;
		if(Element.getType().equals("static")) {
			flag = checkAttributeInheritance(Element, new HashSet<Element>(),flag, "speed");
			for(Attribute attrib : Element.getAttributes()) {
				if(attrib.getName().equals("speed")) {
					flag = true;
				}				
			}
			if(flag)
				error("Static objects must not have speed attribute",	SceneDlPackage.Literals.ATTRIBUTE__NAME);
		}
	}
	
	
	private boolean checkAttributeInheritance(Element Element, Set<Element> entitiesAlreadyChecked, boolean flag, String attributeName) {
		entitiesAlreadyChecked.add(Element);
		for (Element parent : Element.getIsA()) {
			for(Attribute pAttrib : parent.getAttributes()) {
				if(pAttrib.getName().equals(attributeName)) {
					flag = false;
					return flag;
				}
			}
			if (entitiesAlreadyChecked.contains(parent)) {
				return flag;
			}
			flag = checkAttributeInheritance(parent, entitiesAlreadyChecked,flag, attributeName);
		}
		return flag;
	}
	

	@Check
    public void checkPosDefinitions(Element Element) {
        boolean flag = false;
        for(Attribute attrib : Element.getAttributes()) {
            if(attrib.getName().equals("position")) {
                flag = true;
                break;
            }
        }  
        if(flag ^ checkAttributeInheritance(Element, new HashSet<Element>(),flag, "position")) {
        	error("Position must not be defined if already inherited",	SceneDlPackage.Literals.ATTRIBUTE__NAME);
        }
    }
		
	@Check
	public void isPosNegative(Element Element) {
    	for(Attribute attrib : Element.getAttributes()) {
    		if(attrib.getName().equals("position")) {
    			PositionAttribute posattr = (PositionAttribute)attrib;
        			if(posattr.getX() < 0) {
        				error("Position values cannot be negative", SceneDlPackage.Literals.POSITION_ATTRIBUTE__X);
        			} 
        			if(posattr.getY() < 0) {
        				error("Position values cannot be negative", SceneDlPackage.Literals.POSITION_ATTRIBUTE__Y);
        			}	
            }  
        }           
	}
}
