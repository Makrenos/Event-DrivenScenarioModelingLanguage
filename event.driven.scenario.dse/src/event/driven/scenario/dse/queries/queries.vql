package event.driven.scenario.dse.queries

import "http://www.eventDrivenScenario.org/edsdl"
import "http://www.eventDrivenScenario.org/scenedl"

//Constraints
pattern inScene(entity: DynamicEntity,scene : Scene){
	Scene.elements(scene,entity);
	
	Scene.boundry(scene,boundryPos);
	PositionAttribute.x(boundryPos,boundryPosX);
	PositionAttribute.y(boundryPos,boundryPosY);
	
	DynamicEntity.position(entity,entityPos);
	PositionAttribute.x(entityPos,posX);
	PositionAttribute.y(entityPos,posY);
	
	check(posX <= boundryPosX && posY <= boundryPosY && posX >= 0 && posY >= 0);
}

pattern egoOnRoad(de: DynamicEntity,se: StaticEntity){		
	DynamicEntity.on(de,se);
}

pattern noCollision4(e: DynamicEntity,p: DynamicEntity,c1: DynamicEntity,c2: DynamicEntity){
	//DynamicEntity.name(p,"pedestrian");
	DynamicEntity.position(p,pedestrianePos);
	PositionAttribute.y(pedestrianePos,pedestrianPosY);
	PositionAttribute.x(pedestrianePos,pedestrianPosX);
	
	//DynamicEntity.name(c,"ego");
	DynamicEntity.position(e,egoPos);
	PositionAttribute.x(egoPos,egoPosX);
	PositionAttribute.y(egoPos,egoPosY);
	
	DynamicEntity.position(c1,car1Pos);
	PositionAttribute.x(car1Pos,car1PosX);
	PositionAttribute.y(car1Pos,car1PosY);
	
	DynamicEntity.position(c2,car2Pos);
	PositionAttribute.x(car2Pos,car2PosX);
	PositionAttribute.y(car2Pos,car2PosY);
	
	check(egoPosX != pedestrianPosX && pedestrianPosY != egoPosY);
}

pattern noCollision3(e: DynamicEntity,p: DynamicEntity,c1: DynamicEntity){
	//DynamicEntity.name(p,"pedestrian");
	DynamicEntity.position(p,pedestrianePos);
	PositionAttribute.y(pedestrianePos,pedestrianPosY);
	PositionAttribute.x(pedestrianePos,pedestrianPosX);
	
	//DynamicEntity.name(c,"ego");
	DynamicEntity.position(e,egoPos);
	PositionAttribute.x(egoPos,egoPosX);
	PositionAttribute.y(egoPos,egoPosY);
	
	DynamicEntity.position(c1,car1Pos);
	PositionAttribute.x(car1Pos,car1PosX);
	PositionAttribute.y(car1Pos,car1PosY);
	
	check(egoPosX != pedestrianPosX && pedestrianPosY != egoPosY);
}

pattern collision2(e: DynamicEntity,p: DynamicEntity){
	//DynamicEntity.name(p,"pedestrian");
	DynamicEntity.position(p,pedestrianePos);
	PositionAttribute.y(pedestrianePos,pedestrianPosY);
	PositionAttribute.x(pedestrianePos,pedestrianPosX);
	
	//DynamicEntity.name(e,"ego");
	DynamicEntity.position(e,egoPos);
	PositionAttribute.x(egoPos,egoPosX);
	PositionAttribute.y(egoPos,egoPosY);
	egoPosX == pedestrianPosX;
	pedestrianPosY == egoPosY;
	//check(egoPosX == pedestrianPosX && pedestrianPosY == egoPosY);
}

//Rules
pattern getPossibleTransitions(stateMachine : StateMachine,actualState: State,t : Transition){
	StateMachine.runtimestate(stateMachine,r);
	RuntimeState.actualState(r,actualState);
	State.outTransitions(actualState,t);
}

pattern vehicleSlowsDown(scene: Scene, vehicle: DynamicEntity, by : java Integer){
	Scene.elements(scene,vehicle);
	DynamicEntity.name(vehicle,"ego");
	by == -1;
}

pattern vehicleAccelerates(scene: Scene, vehicle: DynamicEntity, by : java Integer){
	Scene.elements(scene,vehicle);
	DynamicEntity.name(vehicle,"ego");
	by == 1;
}

pattern vehicleMoves(scene: Scene, vehicle: DynamicEntity){
	Scene.elements(scene,vehicle);
	DynamicEntity.name(vehicle,"ego");
}

pattern pedestrianMoves(scene: Scene, pedestrian: DynamicEntity){
	Scene.elements(scene,pedestrian);
	DynamicEntity.name(pedestrian,"pedestrian");
	find inScene(pedestrian,scene);
}



//Objectives
pattern egoReachesRoadEndWithPedestrian(scene: Scene, ego: DynamicEntity, pedestrian: DynamicEntity,crosswalk: StaticEntity){
	Scene.elements(scene,ego);
	Scene.elements(scene,road);
	Scene.elements(scene,pedestrian);
	Scene.elements(scene,crosswalk);
	
	StaticEntity.name(crosswalk,"crosswalk");
	DynamicEntity.name(pedestrian,"pedestrian");
	StaticEntity.name(road,"road");
	
	StaticEntity.lanes(crosswalk,crosswalkLanes);
	Lane.startingPosition(crosswalkLanes,crosswalkPos);
	PositionAttribute.y(crosswalkPos,crosswalkPosY);
	PositionAttribute.x(crosswalkPos,crosswalkPosX);
	
	DynamicEntity.position(pedestrian,pedestrianePos);
	PositionAttribute.y(pedestrianePos,pedestrianPosY);
	
	DynamicEntity.name(ego,"ego");
	DynamicEntity.position(ego,egoPos);
	PositionAttribute.x(egoPos,egoPosX);
	
	find inScene(pedestrian,scene);
	find inScene(ego,scene);
	neg find collision2(ego,pedestrian);
	
	check(egoPosX > crosswalkPosX && pedestrianPosY < crosswalkPosY);
}

