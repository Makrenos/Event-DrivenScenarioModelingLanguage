package event.driven.scenario.dse.queries

import "http://www.eventDrivenScenario.org/edsdl"
import "http://www.eventDrivenScenario.org/scenedl"

//Constraints
pattern inScene(entity: DynamicEntity,scene : Scene){
	Scene.elements(scene,entity);
	
	Scene.boundry(scene,boundryPos);
	PositionAttribute.x(boundryPos,boundryPosX);
	PositionAttribute.y(boundryPos,boundryPosY);
	
	DynamicEntity.speed(entity,entitySpeed);
	PositionAttribute.x(entitySpeed,speedX);
	PositionAttribute.y(entitySpeed,speedY);
	
	DynamicEntity.position(entity,entityPos);
	PositionAttribute.x(entityPos,posX);
	PositionAttribute.y(entityPos,posY);
	
	check((posX+speedX) <= boundryPosX && (posY+speedY) <= boundryPosY && (posX+speedX) >= 0 && (posY+speedY) >= 0);
}
/*
pattern inScene(entity: DynamicEntity,scene : Scene){
	Scene.elements(scene,entity);
	
	Scene.boundry(scene,boundryPos);
	PositionAttribute.x(boundryPos,boundryPosX);
	PositionAttribute.y(boundryPos,boundryPosY);
	
	DynamicEntity.speed(entity,entitySpeed);
	PositionAttribute.x(entitySpeed,speedX);
	PositionAttribute.y(entitySpeed,speedY);
	
	DynamicEntity.position(entity,entityPos);
	PositionAttribute.x(entityPos,posX);
	PositionAttribute.y(entityPos,posY);
	
	check(posX <= boundryPosX && posY <= boundryPosY && posX >= 0 && posY >= 0);
}
*/


pattern egoOnRoad(de: DynamicEntity,se: StaticEntity){		
	DynamicEntity.on(de,se);
}

pattern collision(d1: DynamicEntity,d2: DynamicEntity){
	d1 != d2;
	//DynamicEntity.name(p,"pedestrian");
	DynamicEntity.position(d2,d2Pos);
	PositionAttribute.y(d2Pos,d2PosY);
	PositionAttribute.x(d2Pos,d2PosX);
	
	//DynamicEntity.name(e,"ego");
	DynamicEntity.position(d1,d1Pos);
	PositionAttribute.x(d1Pos,d1PosX);
	PositionAttribute.y(d1Pos,d1PosY);
	d1PosX == d2PosX;
	d1PosY == d2PosY;
	//check(egoPosX == pedestrianPosX && pedestrianPosY == egoPosY);
}

//Rules
pattern getPossibleTransitions(stateMachine : StateMachine,actualState: State,t : Transition){
	StateMachine.runtimestate(stateMachine,r);
	RuntimeState.actualState(r,actualState);
	State.outTransitions(actualState,t);
}

pattern vehicleSlowsDown(scene: Scene, vehicle: DynamicEntity, by : java Integer){
	find danger(vehicle);
	DynamicEntity.speed(vehicle,speed);
	PositionAttribute.x(speed,speedX);
	check(speedX>0);
	find inScene(vehicle,scene);
	Scene.elements(scene,vehicle);
	DynamicEntity.name(vehicle,"ego");
	by == -1;
}

pattern vehicleAccelerates(scene: Scene, vehicle: DynamicEntity, by : java Integer){
	neg find speedLimit(vehicle,2);
	neg find danger(vehicle);
	find inScene(vehicle,scene);
	Scene.elements(scene,vehicle);
	DynamicEntity.name(vehicle,"ego");
	by == 1;
}

pattern vehicleMoves(scene: Scene, vehicle: DynamicEntity){
	find speedLimit(vehicle,2);
	neg find danger(vehicle);
	find inScene(vehicle,scene);
	Scene.elements(scene,vehicle);
	DynamicEntity.name(vehicle,"ego");
}

pattern pedestrianMoves(scene: Scene, pedestrian: DynamicEntity){
	find inScene(pedestrian,scene);
	Scene.elements(scene,pedestrian);
	DynamicEntity.name(pedestrian,"pedestrian");
	
}

//Conditions
pattern danger(vehicle: DynamicEntity){
	DynamicEntity.name(pedestrian,"pedestrian");
	DynamicEntity.position(pedestrian,pedestrianPosition);
	PositionAttribute.x(pedestrianPosition,pedestrianPositionX);
	PositionAttribute.y(pedestrianPosition,pedestrianPositionY);
	DynamicEntity.position(vehicle,vehiclePosition);
	PositionAttribute.x(vehiclePosition,vehiclePositionX);
	PositionAttribute.y(vehiclePosition,vehiclePositionY);
	DynamicEntity.speed(vehicle,speed);
	
	PositionAttribute.y(speed,speedY);
	check(vehiclePositionX<pedestrianPositionX);
	check((vehiclePositionY+speedY+1) == pedestrianPositionY);
} or {
	DynamicEntity.name(pedestrian,"pedestrian");
	DynamicEntity.position(pedestrian,pedestrianPosition);
	PositionAttribute.x(pedestrianPosition,pedestrianPositionX);
	
	DynamicEntity.position(vehicle,vehiclePosition);
	PositionAttribute.x(vehiclePosition,vehiclePositionX);
	
	DynamicEntity.speed(vehicle,speed);
	PositionAttribute.x(speed,speedX);
	
	
	check((vehiclePositionX+speedX+1) == pedestrianPositionX);
}


pattern speedLimit(vehicle: DynamicEntity, limit : java Integer){
	limit == 2;
	DynamicEntity.speed(vehicle,speed);
	PositionAttribute.x(speed,speedX);
	PositionAttribute.y(speed,speedY);
	check(speedX == limit || speedY == limit);
}

//Measurements

pattern vehicleSlowsDownMeasurements(scene: Scene, vehicle: DynamicEntity, by : java Integer){
	find danger(vehicle);
	DynamicEntity.speed(vehicle,speed);
	PositionAttribute.x(speed,speedX);
	check(speedX>0);
	neg DynamicEntity.name(vehicle,"pedestrian");
	neg DynamicEntity.name(vehicle,"ego");
	find inScene(vehicle,scene);
	Scene.elements(scene,vehicle);
	by == -1;
}

pattern vehicleAcceleratesMeasurements(scene: Scene, vehicle: DynamicEntity, by : java Integer){
	neg find danger(vehicle);
	neg find speedLimit(vehicle,2);
	neg DynamicEntity.name(vehicle,"pedestrian");
	neg DynamicEntity.name(vehicle,"ego");
	find inScene(vehicle,scene);
	Scene.elements(scene,vehicle);
	by == 1;
}

pattern vehicleMovesMeasurements(scene: Scene, vehicle: DynamicEntity){
	neg find danger(vehicle);
	find speedLimit(vehicle,2);
	neg DynamicEntity.name(vehicle,"pedestrian");
	neg DynamicEntity.name(vehicle,"ego");
	find inScene(vehicle,scene);
	Scene.elements(scene,vehicle);
}

pattern randomVehicleMovesMeasurements(scene: Scene, vehicle: DynamicEntity){
	neg find danger(vehicle);
	find speedLimit(vehicle,2);
	neg DynamicEntity.name(vehicle,"pedestrian");
	neg DynamicEntity.name(vehicle,"ego");
	find inScene(vehicle,scene);
	Scene.elements(scene,vehicle);
}


//Test
pattern vehicleSlowsDownTEST(scene: Scene, vehicle: DynamicEntity, by : java Integer){
	find danger(vehicle);
	DynamicEntity.speed(vehicle,speed);
	PositionAttribute.x(speed,speedX);
	check(speedX>0);
	neg DynamicEntity.name(vehicle,"pedestrian");
	find inScene(vehicle,scene);
	Scene.elements(scene,vehicle);
	
	by == -1;
}

pattern vehicleAcceleratesTEST(scene: Scene, vehicle: DynamicEntity, by : java Integer){
	neg DynamicEntity.name(vehicle,"pedestrian");
	neg find danger(vehicle);
	neg find speedLimit(vehicle,2);
	find inScene(vehicle,scene);
	Scene.elements(scene,vehicle);

	by == 1;
}

pattern vehicleMovesTEST(scene: Scene, vehicle: DynamicEntity){
	neg DynamicEntity.name(vehicle,"pedestrian");
	neg find danger(vehicle);
	find speedLimit(vehicle,2);
	find inScene(vehicle,scene);
	Scene.elements(scene,vehicle);
}

//WOM
pattern vehicleSlowsDownWOM(scene: Scene, vehicle: DynamicEntity, by : java Integer){
	
	DynamicEntity.speed(vehicle,speed);
	PositionAttribute.x(speed,speedX);
	check(speedX>0);
	neg DynamicEntity.name(vehicle,"pedestrian");
	find inScene(vehicle,scene);
	Scene.elements(scene,vehicle);
	
	by == -1;
}

pattern vehicleAcceleratesWOM(scene: Scene, vehicle: DynamicEntity, by : java Integer){
	neg DynamicEntity.name(vehicle,"pedestrian");
	
	find inScene(vehicle,scene);
	Scene.elements(scene,vehicle);

	by == 1;
}

pattern vehicleMovesWOM(scene: Scene, vehicle: DynamicEntity){
	neg DynamicEntity.name(vehicle,"pedestrian");
	find inScene(vehicle,scene);
	Scene.elements(scene,vehicle);
}

//Objectives
pattern egoReachesRoadEndWithPedestrian(scene: Scene, ego: DynamicEntity, pedestrian: DynamicEntity,crosswalk: StaticEntity){
	Scene.elements(scene,ego);
	Scene.elements(scene,road);
	Scene.elements(scene,pedestrian);
	Scene.elements(scene,crosswalk);
	
	StaticEntity.name(crosswalk,"crosswalk");
	DynamicEntity.name(pedestrian,"pedestrian");
	StaticEntity.name(road,"road");
	
	StaticEntity.lanes(crosswalk,crosswalkLanes);
	Lane.startingPosition(crosswalkLanes,crosswalkPos);
	PositionAttribute.y(crosswalkPos,crosswalkPosY);
	PositionAttribute.x(crosswalkPos,crosswalkPosX);
	
	DynamicEntity.position(pedestrian,pedestrianePos);
	PositionAttribute.y(pedestrianePos,pedestrianPosY);
	
	DynamicEntity.name(ego,"ego");
	DynamicEntity.position(ego,egoPos);
	PositionAttribute.x(egoPos,egoPosX);
	
	find inScene(pedestrian,scene);
	find inScene(ego,scene);
	neg find collision(ego,pedestrian);
	
	check(egoPosX > crosswalkPosX && pedestrianPosY < crosswalkPosY);
}

pattern egoReachesRoadEndWithPedestrianMeasurement(scene: Scene, ego: DynamicEntity, pedestrian: DynamicEntity,crosswalk: StaticEntity){
	
	Scene.elements(scene,ego);
	Scene.elements(scene,road);
	Scene.elements(scene,pedestrian);
	Scene.elements(scene,crosswalk);
	
	StaticEntity.name(crosswalk,"crosswalk");
	DynamicEntity.name(pedestrian,"pedestrian");
	StaticEntity.name(road,"road");
	
	StaticEntity.lanes(crosswalk,crosswalkLanes);
	Lane.startingPosition(crosswalkLanes,crosswalkPos);
	PositionAttribute.y(crosswalkPos,crosswalkPosY);
	PositionAttribute.x(crosswalkPos,crosswalkPosX);
	
	DynamicEntity.position(pedestrian,pedestrianePos);
	PositionAttribute.y(pedestrianePos,pedestrianPosY);
	
	DynamicEntity.name(ego,"ego");
	DynamicEntity.position(ego,egoPos);
	PositionAttribute.x(egoPos,egoPosX);
	
	
	//find inScene(ego,scene);
	//find inScene(ego,scene);
	neg find collision(_,_);
	
	//neg find collision2(ego,pedestrian);
	//neg find collision2(car1,pedestrian);
	
	check(egoPosX > crosswalkPosX && pedestrianPosY < crosswalkPosY);
	
}

